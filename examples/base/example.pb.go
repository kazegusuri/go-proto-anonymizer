// Code generated by protoc-gen-go.
// source: examples/base/example.proto
// DO NOT EDIT!

/*
Package examples is a generated protocol buffer package.

It is generated from these files:
	examples/base/example.proto

It has these top-level messages:
	SimpleMessage
	NumberMessage
	RepeatedNumberMessage
	NestedMessage
	EnumMessage
	Oneof
	OneofMessage
	MapMessage
	WellKnownTypeMessage
*/
package examples

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/kazegusuri/go-proto-anonymizer"
import google_protobuf1 "github.com/golang/protobuf/ptypes/duration"
import google_protobuf2 "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NumericEnum int32

const (
	NumericEnum_ZERO NumericEnum = 0
	NumericEnum_ONE  NumericEnum = 1
	NumericEnum_TWO  NumericEnum = 2
)

var NumericEnum_name = map[int32]string{
	0: "ZERO",
	1: "ONE",
	2: "TWO",
}
var NumericEnum_value = map[string]int32{
	"ZERO": 0,
	"ONE":  1,
	"TWO":  2,
}

func (x NumericEnum) String() string {
	return proto.EnumName(NumericEnum_name, int32(x))
}
func (NumericEnum) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type AliasedEnum int32

const (
	AliasedEnum_UNKNOWN AliasedEnum = 0
	AliasedEnum_STARTED AliasedEnum = 1
	AliasedEnum_RUNNING AliasedEnum = 1
)

var AliasedEnum_name = map[int32]string{
	0: "UNKNOWN",
	1: "STARTED",
	// Duplicate value: 1: "RUNNING",
}
var AliasedEnum_value = map[string]int32{
	"UNKNOWN": 0,
	"STARTED": 1,
	"RUNNING": 1,
}

func (x AliasedEnum) String() string {
	return proto.EnumName(AliasedEnum_name, int32(x))
}
func (AliasedEnum) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type EnumMessage_Nested int32

const (
	EnumMessage_UNKNOWN   EnumMessage_Nested = 0
	EnumMessage_PENDING   EnumMessage_Nested = 1
	EnumMessage_COMPLETED EnumMessage_Nested = 2
)

var EnumMessage_Nested_name = map[int32]string{
	0: "UNKNOWN",
	1: "PENDING",
	2: "COMPLETED",
}
var EnumMessage_Nested_value = map[string]int32{
	"UNKNOWN":   0,
	"PENDING":   1,
	"COMPLETED": 2,
}

func (x EnumMessage_Nested) String() string {
	return proto.EnumName(EnumMessage_Nested_name, int32(x))
}
func (EnumMessage_Nested) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 0} }

type SimpleMessage struct {
	StringValue string `protobuf:"bytes,1,opt,name=string_value,json=stringValue" json:"string_value,omitempty"`
	BoolValue   bool   `protobuf:"varint,2,opt,name=bool_value,json=boolValue" json:"bool_value,omitempty"`
}

func (m *SimpleMessage) Reset()                    { *m = SimpleMessage{} }
func (m *SimpleMessage) String() string            { return proto.CompactTextString(m) }
func (*SimpleMessage) ProtoMessage()               {}
func (*SimpleMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SimpleMessage) GetStringValue() string {
	if m != nil {
		return m.StringValue
	}
	return ""
}

func (m *SimpleMessage) GetBoolValue() bool {
	if m != nil {
		return m.BoolValue
	}
	return false
}

type NumberMessage struct {
	FloatValue    float32 `protobuf:"fixed32,1,opt,name=float_value,json=floatValue" json:"float_value,omitempty"`
	DoubleValue   float64 `protobuf:"fixed64,2,opt,name=double_value,json=doubleValue" json:"double_value,omitempty"`
	Int32Value    int32   `protobuf:"varint,3,opt,name=int32_value,json=int32Value" json:"int32_value,omitempty"`
	Int64Value    int64   `protobuf:"varint,4,opt,name=int64_value,json=int64Value" json:"int64_value,omitempty"`
	Uint32Value   uint32  `protobuf:"varint,5,opt,name=uint32_value,json=uint32Value" json:"uint32_value,omitempty"`
	Uint64Value   uint64  `protobuf:"varint,6,opt,name=uint64_value,json=uint64Value" json:"uint64_value,omitempty"`
	Sint32Value   int32   `protobuf:"zigzag32,7,opt,name=sint32_value,json=sint32Value" json:"sint32_value,omitempty"`
	Sint64Value   int64   `protobuf:"zigzag64,8,opt,name=sint64_value,json=sint64Value" json:"sint64_value,omitempty"`
	Fixed32Value  uint32  `protobuf:"fixed32,9,opt,name=fixed32_value,json=fixed32Value" json:"fixed32_value,omitempty"`
	Fixed64Value  uint64  `protobuf:"fixed64,10,opt,name=fixed64_value,json=fixed64Value" json:"fixed64_value,omitempty"`
	Sfixed32Value int32   `protobuf:"fixed32,11,opt,name=sfixed32_value,json=sfixed32Value" json:"sfixed32_value,omitempty"`
	Sfixed64Value int64   `protobuf:"fixed64,12,opt,name=sfixed64_value,json=sfixed64Value" json:"sfixed64_value,omitempty"`
}

func (m *NumberMessage) Reset()                    { *m = NumberMessage{} }
func (m *NumberMessage) String() string            { return proto.CompactTextString(m) }
func (*NumberMessage) ProtoMessage()               {}
func (*NumberMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *NumberMessage) GetFloatValue() float32 {
	if m != nil {
		return m.FloatValue
	}
	return 0
}

func (m *NumberMessage) GetDoubleValue() float64 {
	if m != nil {
		return m.DoubleValue
	}
	return 0
}

func (m *NumberMessage) GetInt32Value() int32 {
	if m != nil {
		return m.Int32Value
	}
	return 0
}

func (m *NumberMessage) GetInt64Value() int64 {
	if m != nil {
		return m.Int64Value
	}
	return 0
}

func (m *NumberMessage) GetUint32Value() uint32 {
	if m != nil {
		return m.Uint32Value
	}
	return 0
}

func (m *NumberMessage) GetUint64Value() uint64 {
	if m != nil {
		return m.Uint64Value
	}
	return 0
}

func (m *NumberMessage) GetSint32Value() int32 {
	if m != nil {
		return m.Sint32Value
	}
	return 0
}

func (m *NumberMessage) GetSint64Value() int64 {
	if m != nil {
		return m.Sint64Value
	}
	return 0
}

func (m *NumberMessage) GetFixed32Value() uint32 {
	if m != nil {
		return m.Fixed32Value
	}
	return 0
}

func (m *NumberMessage) GetFixed64Value() uint64 {
	if m != nil {
		return m.Fixed64Value
	}
	return 0
}

func (m *NumberMessage) GetSfixed32Value() int32 {
	if m != nil {
		return m.Sfixed32Value
	}
	return 0
}

func (m *NumberMessage) GetSfixed64Value() int64 {
	if m != nil {
		return m.Sfixed64Value
	}
	return 0
}

type RepeatedNumberMessage struct {
	FloatValues    []float32 `protobuf:"fixed32,1,rep,packed,name=float_values,json=floatValues" json:"float_values,omitempty"`
	DoubleValues   []float64 `protobuf:"fixed64,2,rep,packed,name=double_values,json=doubleValues" json:"double_values,omitempty"`
	Int32Values    []int32   `protobuf:"varint,3,rep,packed,name=int32_values,json=int32Values" json:"int32_values,omitempty"`
	Int64Values    []int64   `protobuf:"varint,4,rep,packed,name=int64_values,json=int64Values" json:"int64_values,omitempty"`
	Uint32Values   []uint32  `protobuf:"varint,5,rep,packed,name=uint32_values,json=uint32Values" json:"uint32_values,omitempty"`
	Uint64Values   []uint64  `protobuf:"varint,6,rep,packed,name=uint64_values,json=uint64Values" json:"uint64_values,omitempty"`
	Sint32Values   []int32   `protobuf:"zigzag32,7,rep,packed,name=sint32_values,json=sint32Values" json:"sint32_values,omitempty"`
	Sint64Values   []int64   `protobuf:"zigzag64,8,rep,packed,name=sint64_values,json=sint64Values" json:"sint64_values,omitempty"`
	Fixed32Values  []uint32  `protobuf:"fixed32,9,rep,packed,name=fixed32_values,json=fixed32Values" json:"fixed32_values,omitempty"`
	Fixed64Values  []uint64  `protobuf:"fixed64,10,rep,packed,name=fixed64_values,json=fixed64Values" json:"fixed64_values,omitempty"`
	Sfixed32Values []int32   `protobuf:"fixed32,11,rep,packed,name=sfixed32_values,json=sfixed32Values" json:"sfixed32_values,omitempty"`
	Sfixed64Values []int64   `protobuf:"fixed64,12,rep,packed,name=sfixed64_values,json=sfixed64Values" json:"sfixed64_values,omitempty"`
}

func (m *RepeatedNumberMessage) Reset()                    { *m = RepeatedNumberMessage{} }
func (m *RepeatedNumberMessage) String() string            { return proto.CompactTextString(m) }
func (*RepeatedNumberMessage) ProtoMessage()               {}
func (*RepeatedNumberMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RepeatedNumberMessage) GetFloatValues() []float32 {
	if m != nil {
		return m.FloatValues
	}
	return nil
}

func (m *RepeatedNumberMessage) GetDoubleValues() []float64 {
	if m != nil {
		return m.DoubleValues
	}
	return nil
}

func (m *RepeatedNumberMessage) GetInt32Values() []int32 {
	if m != nil {
		return m.Int32Values
	}
	return nil
}

func (m *RepeatedNumberMessage) GetInt64Values() []int64 {
	if m != nil {
		return m.Int64Values
	}
	return nil
}

func (m *RepeatedNumberMessage) GetUint32Values() []uint32 {
	if m != nil {
		return m.Uint32Values
	}
	return nil
}

func (m *RepeatedNumberMessage) GetUint64Values() []uint64 {
	if m != nil {
		return m.Uint64Values
	}
	return nil
}

func (m *RepeatedNumberMessage) GetSint32Values() []int32 {
	if m != nil {
		return m.Sint32Values
	}
	return nil
}

func (m *RepeatedNumberMessage) GetSint64Values() []int64 {
	if m != nil {
		return m.Sint64Values
	}
	return nil
}

func (m *RepeatedNumberMessage) GetFixed32Values() []uint32 {
	if m != nil {
		return m.Fixed32Values
	}
	return nil
}

func (m *RepeatedNumberMessage) GetFixed64Values() []uint64 {
	if m != nil {
		return m.Fixed64Values
	}
	return nil
}

func (m *RepeatedNumberMessage) GetSfixed32Values() []int32 {
	if m != nil {
		return m.Sfixed32Values
	}
	return nil
}

func (m *RepeatedNumberMessage) GetSfixed64Values() []int64 {
	if m != nil {
		return m.Sfixed64Values
	}
	return nil
}

type NestedMessage struct {
	NestedValue          *NestedMessage_Nested   `protobuf:"bytes,1,opt,name=nested_value,json=nestedValue" json:"nested_value,omitempty"`
	RepeatedNestedValues []*NestedMessage_Nested `protobuf:"bytes,2,rep,name=repeated_nested_values,json=repeatedNestedValues" json:"repeated_nested_values,omitempty"`
}

func (m *NestedMessage) Reset()                    { *m = NestedMessage{} }
func (m *NestedMessage) String() string            { return proto.CompactTextString(m) }
func (*NestedMessage) ProtoMessage()               {}
func (*NestedMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *NestedMessage) GetNestedValue() *NestedMessage_Nested {
	if m != nil {
		return m.NestedValue
	}
	return nil
}

func (m *NestedMessage) GetRepeatedNestedValues() []*NestedMessage_Nested {
	if m != nil {
		return m.RepeatedNestedValues
	}
	return nil
}

type NestedMessage_Nested struct {
	Int32Value  int32  `protobuf:"varint,1,opt,name=int32_value,json=int32Value" json:"int32_value,omitempty"`
	StringValue string `protobuf:"bytes,2,opt,name=string_value,json=stringValue" json:"string_value,omitempty"`
}

func (m *NestedMessage_Nested) Reset()                    { *m = NestedMessage_Nested{} }
func (m *NestedMessage_Nested) String() string            { return proto.CompactTextString(m) }
func (*NestedMessage_Nested) ProtoMessage()               {}
func (*NestedMessage_Nested) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

func (m *NestedMessage_Nested) GetInt32Value() int32 {
	if m != nil {
		return m.Int32Value
	}
	return 0
}

func (m *NestedMessage_Nested) GetStringValue() string {
	if m != nil {
		return m.StringValue
	}
	return ""
}

type EnumMessage struct {
	NumericEnumValue          NumericEnum          `protobuf:"varint,1,opt,name=numeric_enum_value,json=numericEnumValue,enum=kazegusuri.example.NumericEnum" json:"numeric_enum_value,omitempty"`
	RepeatedNumericEnumValues []NumericEnum        `protobuf:"varint,2,rep,packed,name=repeated_numeric_enum_values,json=repeatedNumericEnumValues,enum=kazegusuri.example.NumericEnum" json:"repeated_numeric_enum_values,omitempty"`
	AliasedEnumValue          AliasedEnum          `protobuf:"varint,3,opt,name=aliased_enum_value,json=aliasedEnumValue,enum=kazegusuri.example.AliasedEnum" json:"aliased_enum_value,omitempty"`
	NestedEnumValue           EnumMessage_Nested   `protobuf:"varint,4,opt,name=nested_enum_value,json=nestedEnumValue,enum=kazegusuri.example.EnumMessage_Nested" json:"nested_enum_value,omitempty"`
	RepeatedNestedEnumValues  []EnumMessage_Nested `protobuf:"varint,5,rep,packed,name=repeated_nested_enum_values,json=repeatedNestedEnumValues,enum=kazegusuri.example.EnumMessage_Nested" json:"repeated_nested_enum_values,omitempty"`
}

func (m *EnumMessage) Reset()                    { *m = EnumMessage{} }
func (m *EnumMessage) String() string            { return proto.CompactTextString(m) }
func (*EnumMessage) ProtoMessage()               {}
func (*EnumMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *EnumMessage) GetNumericEnumValue() NumericEnum {
	if m != nil {
		return m.NumericEnumValue
	}
	return NumericEnum_ZERO
}

func (m *EnumMessage) GetRepeatedNumericEnumValues() []NumericEnum {
	if m != nil {
		return m.RepeatedNumericEnumValues
	}
	return nil
}

func (m *EnumMessage) GetAliasedEnumValue() AliasedEnum {
	if m != nil {
		return m.AliasedEnumValue
	}
	return AliasedEnum_UNKNOWN
}

func (m *EnumMessage) GetNestedEnumValue() EnumMessage_Nested {
	if m != nil {
		return m.NestedEnumValue
	}
	return EnumMessage_UNKNOWN
}

func (m *EnumMessage) GetRepeatedNestedEnumValues() []EnumMessage_Nested {
	if m != nil {
		return m.RepeatedNestedEnumValues
	}
	return nil
}

type Oneof struct {
	// Types that are valid to be assigned to OneofValue:
	//	*Oneof_Int32Value
	//	*Oneof_StringValue
	OneofValue isOneof_OneofValue `protobuf_oneof:"oneof_value"`
}

func (m *Oneof) Reset()                    { *m = Oneof{} }
func (m *Oneof) String() string            { return proto.CompactTextString(m) }
func (*Oneof) ProtoMessage()               {}
func (*Oneof) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type isOneof_OneofValue interface {
	isOneof_OneofValue()
}

type Oneof_Int32Value struct {
	Int32Value int32 `protobuf:"varint,1,opt,name=int32_value,json=int32Value,oneof"`
}
type Oneof_StringValue struct {
	StringValue string `protobuf:"bytes,2,opt,name=string_value,json=stringValue,oneof"`
}

func (*Oneof_Int32Value) isOneof_OneofValue()  {}
func (*Oneof_StringValue) isOneof_OneofValue() {}

func (m *Oneof) GetOneofValue() isOneof_OneofValue {
	if m != nil {
		return m.OneofValue
	}
	return nil
}

func (m *Oneof) GetInt32Value() int32 {
	if x, ok := m.GetOneofValue().(*Oneof_Int32Value); ok {
		return x.Int32Value
	}
	return 0
}

func (m *Oneof) GetStringValue() string {
	if x, ok := m.GetOneofValue().(*Oneof_StringValue); ok {
		return x.StringValue
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Oneof) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Oneof_OneofMarshaler, _Oneof_OneofUnmarshaler, _Oneof_OneofSizer, []interface{}{
		(*Oneof_Int32Value)(nil),
		(*Oneof_StringValue)(nil),
	}
}

func _Oneof_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Oneof)
	// oneof_value
	switch x := m.OneofValue.(type) {
	case *Oneof_Int32Value:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Int32Value))
	case *Oneof_StringValue:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.StringValue)
	case nil:
	default:
		return fmt.Errorf("Oneof.OneofValue has unexpected type %T", x)
	}
	return nil
}

func _Oneof_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Oneof)
	switch tag {
	case 1: // oneof_value.int32_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.OneofValue = &Oneof_Int32Value{int32(x)}
		return true, err
	case 2: // oneof_value.string_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.OneofValue = &Oneof_StringValue{x}
		return true, err
	default:
		return false, nil
	}
}

func _Oneof_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Oneof)
	// oneof_value
	switch x := m.OneofValue.(type) {
	case *Oneof_Int32Value:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Int32Value))
	case *Oneof_StringValue:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.StringValue)))
		n += len(x.StringValue)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type OneofMessage struct {
	// Types that are valid to be assigned to OneofValue:
	//	*OneofMessage_Int32Value
	//	*OneofMessage_StringValue
	OneofValue          isOneofMessage_OneofValue `protobuf_oneof:"oneof_value"`
	RepeatedOneofValues []*Oneof                  `protobuf:"bytes,3,rep,name=repeated_oneof_values,json=repeatedOneofValues" json:"repeated_oneof_values,omitempty"`
}

func (m *OneofMessage) Reset()                    { *m = OneofMessage{} }
func (m *OneofMessage) String() string            { return proto.CompactTextString(m) }
func (*OneofMessage) ProtoMessage()               {}
func (*OneofMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type isOneofMessage_OneofValue interface {
	isOneofMessage_OneofValue()
}

type OneofMessage_Int32Value struct {
	Int32Value int32 `protobuf:"varint,1,opt,name=int32_value,json=int32Value,oneof"`
}
type OneofMessage_StringValue struct {
	StringValue string `protobuf:"bytes,2,opt,name=string_value,json=stringValue,oneof"`
}

func (*OneofMessage_Int32Value) isOneofMessage_OneofValue()  {}
func (*OneofMessage_StringValue) isOneofMessage_OneofValue() {}

func (m *OneofMessage) GetOneofValue() isOneofMessage_OneofValue {
	if m != nil {
		return m.OneofValue
	}
	return nil
}

func (m *OneofMessage) GetInt32Value() int32 {
	if x, ok := m.GetOneofValue().(*OneofMessage_Int32Value); ok {
		return x.Int32Value
	}
	return 0
}

func (m *OneofMessage) GetStringValue() string {
	if x, ok := m.GetOneofValue().(*OneofMessage_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (m *OneofMessage) GetRepeatedOneofValues() []*Oneof {
	if m != nil {
		return m.RepeatedOneofValues
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*OneofMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _OneofMessage_OneofMarshaler, _OneofMessage_OneofUnmarshaler, _OneofMessage_OneofSizer, []interface{}{
		(*OneofMessage_Int32Value)(nil),
		(*OneofMessage_StringValue)(nil),
	}
}

func _OneofMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*OneofMessage)
	// oneof_value
	switch x := m.OneofValue.(type) {
	case *OneofMessage_Int32Value:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Int32Value))
	case *OneofMessage_StringValue:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.StringValue)
	case nil:
	default:
		return fmt.Errorf("OneofMessage.OneofValue has unexpected type %T", x)
	}
	return nil
}

func _OneofMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*OneofMessage)
	switch tag {
	case 1: // oneof_value.int32_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.OneofValue = &OneofMessage_Int32Value{int32(x)}
		return true, err
	case 2: // oneof_value.string_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.OneofValue = &OneofMessage_StringValue{x}
		return true, err
	default:
		return false, nil
	}
}

func _OneofMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*OneofMessage)
	// oneof_value
	switch x := m.OneofValue.(type) {
	case *OneofMessage_Int32Value:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Int32Value))
	case *OneofMessage_StringValue:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.StringValue)))
		n += len(x.StringValue)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type MapMessage struct {
	MappedValue       map[int32]string          `protobuf:"bytes,1,rep,name=mapped_value,json=mappedValue" json:"mapped_value,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MappedEnumValue   map[string]NumericEnum    `protobuf:"bytes,2,rep,name=mapped_enum_value,json=mappedEnumValue" json:"mapped_enum_value,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=kazegusuri.example.NumericEnum"`
	MappedNestedValue map[string]*NestedMessage `protobuf:"bytes,3,rep,name=mapped_nested_value,json=mappedNestedValue" json:"mapped_nested_value,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *MapMessage) Reset()                    { *m = MapMessage{} }
func (m *MapMessage) String() string            { return proto.CompactTextString(m) }
func (*MapMessage) ProtoMessage()               {}
func (*MapMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *MapMessage) GetMappedValue() map[int32]string {
	if m != nil {
		return m.MappedValue
	}
	return nil
}

func (m *MapMessage) GetMappedEnumValue() map[string]NumericEnum {
	if m != nil {
		return m.MappedEnumValue
	}
	return nil
}

func (m *MapMessage) GetMappedNestedValue() map[string]*NestedMessage {
	if m != nil {
		return m.MappedNestedValue
	}
	return nil
}

type WellKnownTypeMessage struct {
	Duration  *google_protobuf1.Duration  `protobuf:"bytes,1,opt,name=duration" json:"duration,omitempty"`
	Timestamp *google_protobuf2.Timestamp `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *WellKnownTypeMessage) Reset()                    { *m = WellKnownTypeMessage{} }
func (m *WellKnownTypeMessage) String() string            { return proto.CompactTextString(m) }
func (*WellKnownTypeMessage) ProtoMessage()               {}
func (*WellKnownTypeMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *WellKnownTypeMessage) GetDuration() *google_protobuf1.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (m *WellKnownTypeMessage) GetTimestamp() *google_protobuf2.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func init() {
	proto.RegisterType((*SimpleMessage)(nil), "kazegusuri.example.SimpleMessage")
	proto.RegisterType((*NumberMessage)(nil), "kazegusuri.example.NumberMessage")
	proto.RegisterType((*RepeatedNumberMessage)(nil), "kazegusuri.example.RepeatedNumberMessage")
	proto.RegisterType((*NestedMessage)(nil), "kazegusuri.example.NestedMessage")
	proto.RegisterType((*NestedMessage_Nested)(nil), "kazegusuri.example.NestedMessage.Nested")
	proto.RegisterType((*EnumMessage)(nil), "kazegusuri.example.EnumMessage")
	proto.RegisterType((*Oneof)(nil), "kazegusuri.example.Oneof")
	proto.RegisterType((*OneofMessage)(nil), "kazegusuri.example.OneofMessage")
	proto.RegisterType((*MapMessage)(nil), "kazegusuri.example.MapMessage")
	proto.RegisterType((*WellKnownTypeMessage)(nil), "kazegusuri.example.WellKnownTypeMessage")
	proto.RegisterEnum("kazegusuri.example.NumericEnum", NumericEnum_name, NumericEnum_value)
	proto.RegisterEnum("kazegusuri.example.AliasedEnum", AliasedEnum_name, AliasedEnum_value)
	proto.RegisterEnum("kazegusuri.example.EnumMessage_Nested", EnumMessage_Nested_name, EnumMessage_Nested_value)
}

func init() { proto.RegisterFile("examples/base/example.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1082 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0xc7, 0xbd, 0x5a, 0x7d, 0xce, 0x92, 0x36, 0xcd, 0x38, 0x81, 0xa2, 0xb4, 0xf5, 0x5a, 0x41,
	0xda, 0x6d, 0x0e, 0x32, 0x6a, 0xc7, 0xa9, 0xd1, 0x43, 0x81, 0xa4, 0x16, 0x9a, 0xc2, 0x31, 0x95,
	0x6e, 0x9c, 0x1a, 0xc8, 0x21, 0x2e, 0x15, 0xad, 0x05, 0x21, 0x22, 0x29, 0x68, 0xc5, 0x36, 0xce,
	0x0b, 0x14, 0xe8, 0xf3, 0x14, 0x05, 0xfa, 0x28, 0x7d, 0x96, 0x5e, 0x0a, 0x72, 0x97, 0xe4, 0x52,
	0x52, 0x51, 0x17, 0xe8, 0x4d, 0x33, 0xfc, 0xef, 0x6f, 0x86, 0x33, 0xc3, 0xd1, 0xc2, 0x3d, 0xf1,
	0xde, 0x0f, 0x66, 0x53, 0x21, 0xf7, 0x87, 0xbe, 0x14, 0xfb, 0xda, 0xea, 0xcd, 0xe6, 0xd1, 0x22,
	0x72, 0xdd, 0x77, 0xfe, 0x07, 0x31, 0x8e, 0x65, 0x3c, 0x9f, 0xf4, 0xf4, 0x93, 0x8e, 0xe3, 0x87,
	0x51, 0x78, 0x1d, 0x4c, 0x3e, 0x88, 0xb9, 0x52, 0x75, 0x3e, 0x19, 0x47, 0xd1, 0x78, 0x2a, 0xf6,
	0x53, 0x6b, 0x18, 0x5f, 0xed, 0x8f, 0xe2, 0xb9, 0xbf, 0x98, 0x44, 0xa1, 0x7e, 0xbe, 0xbb, 0xfc,
	0x7c, 0x31, 0x09, 0x84, 0x5c, 0xf8, 0xc1, 0x4c, 0x09, 0xba, 0xdf, 0x83, 0xfd, 0x72, 0x92, 0xc0,
	0xcf, 0x84, 0x94, 0xfe, 0x58, 0xb8, 0x7b, 0x60, 0xc9, 0xc5, 0x7c, 0x12, 0x8e, 0x2f, 0x7f, 0xf2,
	0xa7, 0xb1, 0x68, 0x23, 0x8a, 0x58, 0x8b, 0x13, 0xe5, 0xfb, 0x21, 0x71, 0xb9, 0x1f, 0x03, 0x0c,
	0xa3, 0x68, 0xaa, 0x05, 0x15, 0x8a, 0x58, 0x93, 0xb7, 0x12, 0x4f, 0xfa, 0xb8, 0xfb, 0x07, 0x06,
	0xdb, 0x8b, 0x83, 0xa1, 0x98, 0x67, 0xcc, 0x5d, 0x20, 0x57, 0xd3, 0xc8, 0x5f, 0x18, 0xc8, 0x0a,
	0x87, 0xd4, 0xa5, 0x88, 0x7b, 0x60, 0x8d, 0xa2, 0x78, 0x38, 0x15, 0x06, 0x13, 0x71, 0xa2, 0x7c,
	0x4a, 0xb2, 0x0b, 0x64, 0x12, 0x2e, 0x0e, 0x0f, 0xb4, 0x02, 0x53, 0xc4, 0x6a, 0x1c, 0x52, 0x97,
	0x29, 0x78, 0xfc, 0x48, 0x0b, 0xaa, 0x14, 0x31, 0x9c, 0x0a, 0x1e, 0x3f, 0xca, 0x83, 0xc4, 0x26,
	0xa2, 0x46, 0x11, 0xb3, 0x39, 0x89, 0x0d, 0x86, 0x96, 0xe4, 0x90, 0x3a, 0x45, 0xac, 0xaa, 0x24,
	0x06, 0x45, 0x9a, 0x94, 0x06, 0x45, 0x6c, 0x9b, 0x13, 0x59, 0xa6, 0x48, 0x93, 0xd2, 0xa4, 0x88,
	0xb9, 0x4a, 0x92, 0x51, 0xee, 0x83, 0x7d, 0x35, 0x79, 0x2f, 0x46, 0x39, 0xa6, 0x45, 0x11, 0x6b,
	0x70, 0x4b, 0x3b, 0xcb, 0xa2, 0x1c, 0x04, 0x14, 0xb1, 0xba, 0x16, 0x65, 0xa4, 0x07, 0xb0, 0x29,
	0xcb, 0x28, 0x42, 0x11, 0xdb, 0xe2, 0xb6, 0x2c, 0xb1, 0x72, 0x59, 0x0e, 0xb3, 0x28, 0x62, 0x4e,
	0x26, 0xd3, 0xb4, 0xee, 0x9f, 0x18, 0x6e, 0x73, 0x31, 0x13, 0xfe, 0x42, 0x8c, 0xca, 0x3d, 0xdc,
	0x03, 0xcb, 0xe8, 0xa1, 0x6c, 0x23, 0x8a, 0x59, 0x85, 0x93, 0xa2, 0x89, 0x32, 0xc9, 0xd7, 0xec,
	0xa2, 0x6c, 0x57, 0x28, 0x66, 0x88, 0x5b, 0x46, 0x1b, 0x65, 0xc2, 0x31, 0xca, 0x27, 0xdb, 0x98,
	0x62, 0x56, 0xe3, 0xa4, 0x28, 0x5f, 0x26, 0xc9, 0x12, 0x95, 0xed, 0x2a, 0xc5, 0x0c, 0x73, 0x52,
	0x94, 0x2f, 0x0d, 0x15, 0x97, 0x30, 0x35, 0x8a, 0x99, 0xcd, 0xad, 0xd8, 0xe4, 0x68, 0x51, 0x01,
	0xaa, 0x53, 0xcc, 0xaa, 0xdc, 0x8a, 0x97, 0x48, 0xb2, 0x44, 0x6a, 0x50, 0xcc, 0xb6, 0xb9, 0x25,
	0x97, 0x48, 0xb2, 0x44, 0x6a, 0x52, 0xcc, 0x5c, 0x6e, 0x49, 0x93, 0xf4, 0x00, 0x36, 0x4b, 0x8d,
	0x90, 0xed, 0x16, 0xc5, 0xac, 0xc1, 0x6d, 0xb3, 0x11, 0x85, 0xac, 0x80, 0x01, 0xc5, 0xac, 0xce,
	0x6d, 0xb3, 0x11, 0xd2, 0xfd, 0x0c, 0xb6, 0xe4, 0x12, 0x8e, 0x50, 0xcc, 0xb6, 0xf8, 0xa6, 0x2c,
	0xf3, 0x72, 0x61, 0x01, 0xb4, 0x28, 0x66, 0x0e, 0xdf, 0x2c, 0xb5, 0x56, 0x76, 0x7f, 0xad, 0x80,
	0xed, 0x09, 0xb9, 0x10, 0xa3, 0xac, 0xa7, 0xa7, 0x60, 0x85, 0xa9, 0xc3, 0xf8, 0x30, 0xc9, 0x01,
	0xeb, 0xad, 0xae, 0x9e, 0x5e, 0xe9, 0xa0, 0xb6, 0x38, 0x51, 0xa7, 0xd5, 0x84, 0xbd, 0x81, 0x3b,
	0x73, 0x3d, 0x39, 0x97, 0x26, 0x55, 0x8d, 0xc1, 0x7f, 0xc1, 0xee, 0x64, 0x1c, 0xaf, 0xc0, 0xcb,
	0xce, 0x73, 0xa8, 0x2b, 0x7b, 0x79, 0x15, 0xa0, 0x95, 0x55, 0xb0, 0xbc, 0xc3, 0x2a, 0x2b, 0x3b,
	0xac, 0xfb, 0x17, 0x06, 0xd2, 0x0f, 0xe3, 0x20, 0x2b, 0xc5, 0x19, 0xb8, 0x61, 0x1c, 0x88, 0xf9,
	0xe4, 0xed, 0xa5, 0x08, 0xe3, 0xc0, 0x40, 0x6f, 0x1e, 0xec, 0xae, 0xcd, 0x5c, 0xa9, 0x13, 0x06,
	0x77, 0xc2, 0xc2, 0x50, 0x19, 0xfc, 0x08, 0x1f, 0x15, 0xc5, 0x58, 0xe1, 0xaa, 0x92, 0xdc, 0x00,
	0x7c, 0x77, 0x5e, 0x7c, 0x8b, 0xa5, 0x00, 0x32, 0x49, 0xd8, 0x9f, 0x4e, 0x7c, 0x29, 0x46, 0x66,
	0xc2, 0xf8, 0x9f, 0x13, 0x7e, 0xa2, 0xd4, 0x2a, 0x61, 0xbf, 0x30, 0x54, 0xc2, 0x1c, 0xb6, 0x75,
	0xd3, 0x0c, 0x5a, 0x35, 0xa5, 0x7d, 0xba, 0x8e, 0x66, 0xd4, 0x2e, 0x6b, 0xdb, 0x96, 0x02, 0x14,
	0x4c, 0x01, 0xf7, 0x96, 0x27, 0xc2, 0xac, 0x41, 0x2d, 0xad, 0xc1, 0x4d, 0xe9, 0xed, 0xf2, 0x50,
	0x14, 0x95, 0xe8, 0x7e, 0x91, 0x0f, 0x06, 0x81, 0xc6, 0x2b, 0xef, 0xd4, 0x1b, 0x5c, 0x78, 0xce,
	0x46, 0x62, 0xbc, 0xe8, 0x7b, 0x27, 0xdf, 0x79, 0xdf, 0x3a, 0xc8, 0xb5, 0xa1, 0xf5, 0xcd, 0xe0,
	0xec, 0xc5, 0xf3, 0xfe, 0x79, 0xff, 0xc4, 0xa9, 0x74, 0xdf, 0x40, 0x6d, 0x10, 0x8a, 0xe8, 0xca,
	0xdd, 0x5b, 0x33, 0x4a, 0xcf, 0x36, 0x4a, 0xc3, 0x74, 0x7f, 0xdd, 0x30, 0x3d, 0xdb, 0x28, 0x8d,
	0xd3, 0x53, 0x1b, 0x48, 0x94, 0x00, 0x95, 0xa6, 0xfb, 0x1b, 0x02, 0x2b, 0x0d, 0x50, 0x6c, 0xcf,
	0xff, 0x25, 0x8e, 0x7b, 0x06, 0xb7, 0xf3, 0x92, 0x1a, 0x01, 0xd5, 0x1a, 0x25, 0x07, 0x77, 0xd7,
	0x15, 0x33, 0x4d, 0x84, 0xdf, 0xca, 0xce, 0xa5, 0xa6, 0x2a, 0xdd, 0x72, 0xda, 0xbf, 0x57, 0x01,
	0xce, 0xfc, 0x59, 0x96, 0x34, 0x07, 0x2b, 0xf0, 0x67, 0x33, 0x63, 0x3d, 0x24, 0x31, 0xf6, 0xd7,
	0xc5, 0x28, 0x4e, 0x25, 0x3f, 0x67, 0xfa, 0xa3, 0xed, 0x87, 0x8b, 0xf9, 0x35, 0x27, 0x41, 0xe1,
	0x71, 0x2f, 0x61, 0x5b, 0x33, 0x8d, 0x39, 0x53, 0x0b, 0xe2, 0xf0, 0x46, 0xe0, 0xbc, 0xf1, 0x0a,
	0xbe, 0x15, 0x94, 0xbd, 0xae, 0x80, 0x5b, 0x3a, 0x40, 0x69, 0xb5, 0xa9, 0xfa, 0x1c, 0xdd, 0x28,
	0x84, 0xb1, 0x76, 0x54, 0x10, 0x9d, 0xb2, 0xe1, 0xef, 0x7c, 0x0d, 0xce, 0xf2, 0x8b, 0xba, 0x0e,
	0xe0, 0x77, 0xe2, 0x5a, 0xef, 0xa3, 0xe4, 0xa7, 0xbb, 0x03, 0x35, 0x73, 0x03, 0x29, 0xe3, 0xab,
	0xca, 0x31, 0xea, 0xbc, 0x85, 0x9d, 0x75, 0xef, 0x63, 0x32, 0x5a, 0x8a, 0x71, 0x64, 0x32, 0x6e,
	0xb0, 0x33, 0x8c, 0x20, 0x63, 0xb8, 0xb3, 0xfe, 0x8d, 0xd6, 0x84, 0xf9, 0xd2, 0x0c, 0x43, 0x0e,
	0xf6, 0xfe, 0x75, 0x5b, 0x1b, 0x81, 0xba, 0xbf, 0x20, 0xd8, 0xb9, 0x10, 0xd3, 0xe9, 0x69, 0x18,
	0xfd, 0x1c, 0x9e, 0x5f, 0xcf, 0xf2, 0xdb, 0xe4, 0x11, 0x34, 0xb3, 0x1b, 0xa9, 0xfe, 0x77, 0xb9,
	0xdb, 0x53, 0x57, 0xd2, 0x5e, 0x76, 0x25, 0xed, 0x9d, 0x68, 0x01, 0xcf, 0xa5, 0xee, 0x31, 0xb4,
	0xf2, 0x8b, 0xaa, 0x4e, 0xa8, 0xb3, 0x72, 0xee, 0x3c, 0x53, 0xf0, 0x42, 0xfc, 0xf0, 0x73, 0x20,
	0x46, 0x31, 0xdc, 0x26, 0x54, 0x5f, 0xf7, 0xf9, 0xc0, 0xd9, 0x70, 0x1b, 0x80, 0x07, 0x5e, 0xdf,
	0x41, 0xc9, 0x8f, 0xf3, 0x8b, 0x81, 0x53, 0x79, 0x78, 0x0c, 0xc4, 0xd8, 0x89, 0x2b, 0xcb, 0xe3,
	0xe5, 0xf9, 0x13, 0x9e, 0x6c, 0x0b, 0x94, 0x18, 0xfc, 0x95, 0xe7, 0xa5, 0x9b, 0xa4, 0x53, 0x71,
	0xd0, 0x53, 0x78, 0xdd, 0xcc, 0xae, 0xee, 0xc3, 0x7a, 0x9a, 0xcf, 0xe1, 0xdf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x3f, 0x84, 0x71, 0x75, 0xcd, 0x0b, 0x00, 0x00,
}
